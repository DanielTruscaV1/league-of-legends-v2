const fs = require('fs');
const chalk = require('chalk');



lineCount = function (text) {
  var nLines = 0;
  for (var i = 0, n = text.length; i < n; ++i) {
    if (text[i] === '\n') {
      ++nLines;
    }
  }
  return nLines;
}

getLine = function (filename, lineNumber, callback) {
  var data = fs.readFileSync(filename, 'utf8');
  var lines = data.split("\n");

  if (+lineNumber > lines.length) {
    throw new Error('File end reached without finding line');
  }

  callback(null, lines[+lineNumber]);
}

exports.getMultipleLines = function (filename, lineNumber, height) {
  try {
    var codeLines = [];
    var lineNumbers = [lineNumber];

    const count = lineCount(fs.readFileSync(filename, 'utf8'))

    for (var i = 1; i <= height; i++) {
      if (lineNumber + i >= 0 && lineNumber + i < count + 1) {
        lineNumbers.push(lineNumber + i)
      }
      if (lineNumber - i >= 0) {
        lineNumbers.push(lineNumber - i)
      }
    }
    lineNumbers.sort((a, b) => a - b)

    lineNumbers.forEach(function (num) {
      getLine(filename, num, function (err, line) {
        codeLines.push(line);
      });
    })

    return {
      code: codeLines.join('\n'),
      lines: lineNumbers
    }
  } catch (error) {
    return null
  }
}

/**
 * Takes an array of solution objects and returns a string array
 * returns ['0. No solution', '1. Try changing ___ to _____', '2. Try changing ___ to _____','3. Try changing ___ to _____' ]
 */
exports.createSolutionLines = function (solutions) {

  const output = ['0. None work / Not relevant']
  solutions.forEach((snip, index) => {
      const startLines = snip.code.split('\n')
      const endLines = snip.solution.split('\n')
      const start = startLines[3] + startLines[4]
      const end = endLines[3] + endLines[4]
      const sol = (index+1) + '. Try changing ' + chalk.red('\'' + start + '\'') + ' to ' + chalk.green('\'' + end + '\'')
      output.push(sol)

  });

  return output
}


var ApolloLink = require('apollo-link-http');
var ApolloClient = require('apollo-client');
var ApolloCache = require('apollo-cache-inmemory');
var fetch = require('node-fetch');
var gql = require('graphql-tag')
const emoji = require('node-emoji');
const colors = require('colors');
const wrapAnsi = require('wrap-ansi');

const chalk = require('chalk');

var inquirer = require('inquirer');



const { getMultipleLines} = require('./utils')

const readline = require('readline').createInterface({
  input: process.stdin,
  output: process.stdout
})

const API_URL = {
  production: 'https://codemon-graphql-server.herokuapp.com/',
  development: 'http://localhost:4000/'
}

var environment = process.env.NODE_ENV === 'production' ? 'production' : 'development';

message = (content, color) => {

  const msg = emoji.emojify(content)

  if (colors[color]) {
    return colors[color](msg)
  }

  return msg
}

const client = new ApolloClient.ApolloClient({
  link: ApolloLink.createHttpLink({ uri: API_URL.production, fetch }),
  cache: new ApolloCache.InMemoryCache(),
});


const POST_ERROR = gql`
  mutation PostError($path: String!, $code: String!, $type: String!, $message: String!, $lines:[Int]) {
    postError(path: $path, code: $code, type: $type, message: $message, lines: $lines) {
      id
      createdAt
      path
      code
      type
      message
      lines
    }
  }`

const POST_SNIP = gql`
  mutation PostSnip($data: String!) {
    postSnip(data: $data) {
      id
      data
      path
      line
      height
    }
  }`

const UPDATE_SNIP = gql`
  mutation UpdateSnip($id: ID!, $path: String!, $line: Int!, $height: Int!, $code: String!, $description: String) {
    updateSnip(id: $id, path: $path, line: $line,height: $height,code: $code, description: $description) {
      path
      code
      data
    }
  }`

const UPDATE_SNIP_SOLUTION = gql`
  mutation UpdateSnipSolution($id: ID!, $solution: String!) {
    updateSnipSolution(id: $id, solution: $solution) {
      path
      code
      data
    }
  }`

const SIMILAR_SNIP_QUERY = gql`
query GetSimilarSinps($snipId:String!) {
  getSimilarSnips(snipId: $snipId) {
    snips {
      id
      title
      description
      code
      tags {
        tag
      }
      createdAt
      solution
    }
    count
  }
}`


const ADD_SIMILAR_SNIP = gql`
    mutation AddSnipSimilarity($mainId: String!, $relatedId: String!, $isRelated: Boolean!) {
        addSnipSimilarity(
            mainId:$mainId,
            relatedId:$relatedId,
            isRelated:$isRelated
        ) 
        {
            id
            description
        }
    }`

/**
 * Solution stack clearing
 */

solutionStack = []

exports.clearSolutionStack = function () {
  solutionStack.forEach(function (snip) {
    const codeLines = getMultipleLines(snip.path, snip.line, snip.height)
    uploadSolution(snip.id, codeLines.code)
  })
}

/**
 * Uploads initial code snippet to web server
 */
exports.uploadSnip = async function (errorObj) {
  let snipId = await client.mutate({
    mutation: POST_SNIP,
    variables: {
      data: errorObj,
    },
    context: {
      headers: {
        special: "Special header value"
      }
    }
  }).then(result => {
    var snip = result.data.postSnip
    const codeLines = getMultipleLines(snip.path, snip.line, snip.height);
    if (!codeLines) {
      console.log(message(`[Codemon] Error found but file not found. Waiting for changes... will upload code from changes...`, 'green'))
      // Here's where we need to trigger a cache of code then wait till it runs clean and check which file has changed then use the cache
      // to post the original code causing the error.
      return

    } else {
      solutionStack.push({ id: snip.id, path: snip.path, line: snip.line, height: snip.height })
      uploadCode(snip.id, snip.path, snip.line, snip.height, codeLines.code)
      // console.log(message(`[Codemon] We've posted this error posted to Codemon. Waiting for changes...`, 'green'))

      uploadCode(snip.id, snip.path, snip.line, snip.height, codeLines.code, "")
    }

    return snip.id
  });

  return snipId
}

uploadCode = function (id, path, line, height, code, desc) {
  client.mutate({
    mutation: UPDATE_SNIP,
    variables: {
      id: id,
      path: path,
      line: line,
      height: height,
      code: code,
      description: desc
    },
    context: {
      // example of setting the headers with context per operation
      headers: {
        special: "Special header value"
      }
    }
  }).then((result, error) => {
    if (error) {
      console.log('error posting code');
      console.log(error);
    }
  });
}

uploadSolution = function (id, solution) {
  client.mutate({
    mutation: UPDATE_SNIP_SOLUTION,
    variables: {
      id: id,
      solution: solution,
    },
    context: {
      // example of setting the headers with context per operation
      headers: {
        special: "Special header value"
      }
    }
  }).then((result, error) => {
    if (error) {
      console.log('error posting solution');
      console.log(error);
    }
    solutionStack.pop()
  });
}


exports.getSimilarSnips = async function (id) {
  const results = await client.query({
    query: SIMILAR_SNIP_QUERY,
    variables: {
      snipId: id
    },
    context: {
      headers: {
        special: "Special header value"
      }
    }
  }).then((result, error) => {
    if (error) {
      console.log("err");
      console.log(error);
    }
    return result.data.getSimilarSnips.snips



  })

  return results
}


exports.sendResponse = function(results,id, key) {
  if (key < 0) {
    results.forEach((snip) => {
      uploadSimilarity(id, snip.id, false);
    })
  } else {
    uploadSimilarity(id, results[key].id, true);
  }
}

uploadSimilarity = function(mainId, relatedId, isRelated) {
  client.mutate({
    mutation: ADD_SIMILAR_SNIP,
    variables: {
      mainId: mainId,
      relatedId: relatedId,
      isRelated: isRelated
    },
    context: {
      // example of setting the headers with context per operation
      headers: {
        special: "Special header value"
      }
    }
  }).then((result, error) => {
    if (error) {
      console.log('error posting solution');
      console.log(error);
    }
  });
} 


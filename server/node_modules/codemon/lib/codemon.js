var nodemon = require('nodemon');
var path = require('path');
const chalk = require('chalk');

const router = require('../lib/router')
var inquirer = require('inquirer');

const { createSolutionLines } = require('./utils')

let outputError = ''


//Todo: change readable to stdout and stderr

function codemon(script) {

  nodemon({ script: script, stdout: false }).on('start', function () {
    console.log(chalk.green('[codemon] Starting Codemon...'));
    console.log(chalk.green('[codemon] Executing ' + script));

  }).on('readable', function () {


    let outputLog = ''
    this.stdout.on('data', (str) => {
      outputLog += str.toString();
    })

    this.stderr.on('data', (str) => {
      outputError += str.toString();
    })


    this.stdout.on('end', () => {
      console.log(chalk.white(outputLog));
    })


  }).on('crash', function () {


    let pathName = process.cwd() + '/' + process.argv[0]

    console.log(chalk.yellow(outputError));
    console.log(chalk.blue(pathName));
    console.log(chalk.red('[codemon] Error found. Posting to Codemon.'));
    //upload error



    let getSnipId = router.uploadSnip(outputError + '\n' + pathName);
    outputError = '';

    inquirer
      .prompt([{ type: 'confirm', name: "getSnip", message: "Check Codemon?", default: "Y" }])
      .then(answers => {
        if (answers.getSnip) {
          console.log(chalk.red('[codemon] is finding errors...'));
          console.log();
          getSnipId.then((id) => {
            router.getSimilarSnips(id).then((results) => { 
              let choices = createSolutionLines(results)
              inquirer.prompt([
                {type: 'list',
                 name: 'sol', 
                 message: 'Copy to clipboard:', 
                 choices: choices}])
                 .then((answer) => {
                    console.log();
                    router.sendResponse(results, id, (answer.sol[0]-1));
                    console.log(chalk.red('[codemon] Waiting for changes before restarting...'));
                });
            })

           

          })


        } else {
          console.log(chalk.red('[codemon] Waiting for changes before restarting...'));

        }
      })





  }).on('exit', function () {
    console.log(chalk.green('[codemon] Clean exit. Waiting for changes before restart.'));
    //clear solution stack
    router.clearSolutionStack()
  })
}

module.exports = codemon;